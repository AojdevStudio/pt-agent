"""Tool for formatting and delivering weekly workout plans."""

from typing import Any, Dict, Optional
from agency_swarm.tools import BaseTool
from pydantic import Field

# Placeholder for potential communication channel integration (email, app notification, etc.)
# from personal_ai_trainer.utils.communication import send_plan_to_user

class PlanDeliveryTool(BaseTool):
    """
    Formats the workout plan for a specific week and simulates delivering it to the user.
    In a real system, this could integrate with email, messaging apps, or a frontend interface.
    """
    user_id: str = Field(
        ...,
        description="The unique identifier for the user."
    )
    week_number: int = Field(
        ...,
        description="The specific week number (1-4) of the plan to deliver."
    )
    full_workout_plan: Dict[str, Any] = Field(
        ...,
        description="The complete 4-week workout plan, including calculated loads, as generated by previous tools (WorkoutGenerationTool, LoadCalculationTool)."
    )
    delivery_method: Optional[str] = Field(
        default="console", # Default to printing for simulation
        description="Specifies the delivery method (e.g., 'console', 'email', 'api'). Currently only 'console' is simulated."
    )

    def _get_weekly_plan(self) -> Optional[Dict[str, Any]]:
        """Extracts the plan data for the specified week."""
        week_key = f"week_{self.week_number}"
        if week_key in self.full_workout_plan:
            return self.full_workout_plan[week_key]
        else:
            print(f"Error: Week {self.week_number} not found in the provided plan.")
            return None

    def _format_plan_for_delivery(self, weekly_plan: Dict[str, Any]) -> str:
        """Formats the weekly plan into a user-friendly string."""
        formatted_string = f"--- Workout Plan: Week {self.week_number} ---\n\n"

        for day_type, exercises in weekly_plan.items():
            formatted_string += f"**{day_type.capitalize()} Day**\n"
            if isinstance(exercises, list):
                for exercise_details in exercises:
                     if isinstance(exercise_details, dict):
                        name = exercise_details.get('exercise', 'Unknown Exercise')
                        sets = exercise_details.get('sets', 'N/A')
                        reps = exercise_details.get('reps', 'N/A')
                        load = exercise_details.get('calculated_load', 'Use RPE')
                        formatted_string += f"- {name}: {sets} sets x {reps} reps @ {load}\n"
                     else:
                        formatted_string += f"- Invalid exercise format: {exercise_details}\n"
            else:
                 formatted_string += f"- Invalid day format: {exercises}\n"
            formatted_string += "\n"

        formatted_string += "Remember to warm up before each session and cool down afterwards.\n"
        formatted_string += "Listen to your body and adjust if needed based on readiness.\n"
        return formatted_string

    def _deliver_plan(self, formatted_plan: str) -> bool:
        """Simulates delivering the plan based on the specified method."""
        if self.delivery_method == "console":
            print(f"\n--- Delivering Plan to User {self.user_id} (Week {self.week_number}) ---")
            print(formatted_plan)
            print("--- End of Plan Delivery ---")
            # In a real system, replace print with actual delivery logic:
            # send_plan_to_user(self.user_id, formatted_plan, method=self.delivery_method)
            return True
        else:
            print(f"Error: Delivery method '{self.delivery_method}' not implemented.")
            return False

    def run(self) -> Dict[str, Any]:
        """
        Executes the plan delivery logic: extracts the weekly plan, formats it, and simulates delivery.

        Returns:
            Dict[str, Any]: A status message indicating success or failure and the formatted plan.
                            Example: {"success": True, "message": "Plan delivered via console.", "formatted_plan": "..."}
        """
        print(f"Attempting to deliver week {self.week_number} plan for user {self.user_id} via {self.delivery_method}.")

        weekly_plan = self._get_weekly_plan()
        if weekly_plan is None:
            return {"success": False, "message": f"Failed to find plan for week {self.week_number}."}

        formatted_plan = self._format_plan_for_delivery(weekly_plan)

        success = self._deliver_plan(formatted_plan)

        return {
            "success": success,
            "message": f"Plan delivery via {self.delivery_method} {'succeeded' if success else 'failed'}.",
            "formatted_plan": formatted_plan if success else None
        }

# Example Usage (for testing purposes)
if __name__ == "__main__":
    # Example plan structure after load calculation
    test_full_plan = {
        "week_1": {
            "push": [
                {"exercise": "Barbell Bench Press", "sets": 3, "reps": "8-12", "intensity_modifier": 0.95, "calculated_load": "90.0 kg/lb", "debug_1rm": 100.0, "debug_readiness_mod": 0.9785},
                {"exercise": "Overhead Press", "sets": 3, "reps": "8-12", "intensity_modifier": 0.95, "calculated_load": "55.0 kg/lb", "debug_1rm": 60.0, "debug_readiness_mod": 0.9785}
            ],
            "pull": [{"exercise": "Barbell Rows", "sets": 3, "reps": "8-12", "intensity_modifier": 0.95, "calculated_load": "75.0 kg/lb", "debug_1rm": 80.0, "debug_readiness_mod": 0.9785}],
            "legs": [{"exercise": "Barbell Squats", "sets": 3, "reps": "8-12", "intensity_modifier": 0.95, "calculated_load": "130.0 kg/lb", "debug_1rm": 140.0, "debug_readiness_mod": 0.9785}]
        },
        "week_2": { # Example week 2
             "push": [{"exercise": "Barbell Bench Press", "sets": 3, "reps": "8-12", "intensity_modifier": 1.0, "calculated_load": "95.0 kg/lb", "debug_1rm": 100.0, "debug_readiness_mod": 1.03}],
             "pull": [], "legs": []
        }
        # ... weeks 3, 4
    }

    tool = PlanDeliveryTool(
        user_id="test_user_delivery",
        week_number=1,
        full_workout_plan=test_full_plan,
        delivery_method="console"
    )
    delivery_result = tool.run()
    import json
    print("\nDelivery Result (Week 1):")
    # Don't print the whole plan again in the JSON result for brevity
    delivery_result.pop("formatted_plan", None)
    print(json.dumps(delivery_result, indent=2))

    # Test invalid week
    tool_invalid_week = PlanDeliveryTool(
        user_id="test_user_delivery",
        week_number=5,
        full_workout_plan=test_full_plan
    )
    result_invalid = tool_invalid_week.run()
    print("\nDelivery Result (Invalid Week):")
    print(json.dumps(result_invalid, indent=2))